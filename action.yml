name: "Open Peer Power wheels builder"
description: "Builds and publishes python wheels"
inputs:
  container_id:
    description: "The builder container name"
    default: ""
  builderVersion:
    description: "The version of builder required"
    default: ""
  arch:
    description: "Build architecture"
    required: true
  apk:
    description: "apk packages that should be installed"
    default: "build-base"
  pip:
    description: "pip packages that should be installed"
    default: "Cython"
  path:
    description: "The path to be used for the builder"
    default: ""
  env-file:
    description: "Set to true if the builder should use a env file"
    default: false
  requirements:
    description: "The requirements file"
    default: ""
  requirements-diff:
    description: "The requirements diff file"
    default: ""
  constraints:
    description: "The constraints file"
    default: ""
  local:
    description: "Set to true if local"
    default: false
  test:
    description: "Set to true if not uploading wheels"
    default: false
  single:
    description: "Set to true if should build each wheel as a single prosess"
    default: false
  name:
    description: "Job name"
    default: "Wheels"
  skip-binary:
    description: "Skip binaries"
    default: ""
  audit:
    description: "Audit wheels"
    default: false
  github-token:
    description: "github access token"
    default: false
  wheels-index:
    description: "The wheels index URL"
    default: "OpenPeerPower/whl-ix"
  signature:
    description: "github email signature"
    default: false

runs:
  using: "composite"
  steps:

    - shell: bash
      run: |
        echo "Initial Cross Build"
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          qemu-user-static \
          binfmt-support \
          curl \
          jq
        sudo mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
        sudo update-binfmts --enable qemu-arm
        sudo update-binfmts --enable qemu-aarch64

    - shell: bash
      run: |
        echo "Install Wheels Builder"
        docker pull openpeerpower/${{ inputs.arch }}-wheels:${{ inputs.builderVersion }}

    - shell: bash
      id: options
      run: |
        declare -a build
        declare -a docker
        echo ::set-output name=container_id::"${{ inputs.name }}-${{ github.run_id }}-${{ github.run_number }}-${{ inputs.arch }}"
        # Data Path
        if [ -n "${{ inputs.path }}" ]; then
          data_path="${{ github.workspace }}/${{ inputs.path }}"
        else
          data_path="${{ github.workspace }}"
        fi
        # Environment
        if [[ "${{ inputs.env-file  }}" =~ true|True ]] && [ -f .env_file ]; then
          docker+=("--env-file .env_file")
        fi
        if [ -f "${{ inputs.requirements }}" ]; then
          build+=("--requirement ${{ inputs.requirements }}")
        fi
        if [ -f "${{ inputs.requirements-diff }}" ]; then
          build+=("--requirement-diff ${{ inputs.requirements-diff }}")
        fi
        if [ -f "${{ inputs.constraints }}" ]; then
          build+=("--constraint ${{ inputs.constraints }}")
        fi
        if [ -d "${{ inputs.prebuild-dir }}" ]; then
          build+=("--prebuild-dir ${{ inputs.prebuild-dir }}")
        fi
        if  [[ "${{ inputs.single }}" =~ true|True ]]; then
          build+=("--single")
        fi
        if [[ "${{ inputs.local }}" =~ true|True ]]; then
          build+=("--local")
        fi
        if [[ "${{ inputs.test }}" =~ true|True ]]; then
          build+=("--test")
        fi
        if [[ "${{ inputs.audit }}" =~ true|True ]]; then
          build+=("--auditwheel")
        fi
        if [ -n "${{ inputs.skip-binary }}" ]; then
          build+=("--skip-binary ${{ inputs.skip-binary }}")
        fi

        echo "::set-output name=build::${build[@]}"
        echo "::set-output name=docker::${docker[@]}"
        echo "::set-output name=path::$data_path"

    - shell: bash
      run: |
        echo "Create container"
        docker create --name "${{ inputs.container_id }}" -t \
          ${{ steps.options.outputs.docker }} \
          openpeerpower/${{ inputs.arch }}-wheels:${{ inputs.builderVersion }} \
          --apk "${{ inputs.apk }}" \
          --pip "${{ inputs.pip }}" \
          --signature "${{ inputs.signature }}" \          
          --github-token "${{ inputs.github-token }}" \      
          --index-name "${{ inputs.wheels-index }}" \
          ${{ steps.options.outputs.build }}

    - shell: bash
      run: |
        echo "Copy repository to the container"
        docker cp "${{ steps.options.outputs.path }}/." "${{ inputs.name }}:/data"
        
    - shell: bash
      id: build
      run: |
        set +e
        for i in {1..3}; do
          echo "$i attempt on starting the container"
          docker start -a "${{ inputs.name }}"
          return_val=$?
          if [ ${return_val} -ne 0 ] && [ ${return_val} -ne 109 ] && [ ${return_val} -ne 80 ]; then
            continue
          fi
          break
        done
        echo "::set-output name=return_val::$return_val"

    - shell: bash
      run: |
        docker rm -f "${{ inputs.container_id }}"
        exit ${{ steps.build.outputs.return_val }}
